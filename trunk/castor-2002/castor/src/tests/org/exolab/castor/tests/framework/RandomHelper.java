/**
 * Redistribution and use of this software and associated documentation
 * ("Software"), with or without modification, are permitted provided
 * that the following conditions are met:
 *
 * 1. Redistributions of source code must retain copyright
 *    statements and notices.  Redistributions must also contain a
 *    copy of this document.
 *
 * 2. Redistributions in binary form must reproduce the
 *    above copyright notice, this list of conditions and the
 *    following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. The name "Exolab" must not be used to endorse or promote
 *    products derived from this Software without prior written
 *    permission of Intalio, Inc.  For written permission,
 *    please contact info@exolab.org.
 *
 * 4. Products derived from this Software may not be called "Exolab"
 *    nor may "Exolab" appear in their names without prior written
 *    permission of Intalio, Inc. Exolab is a registered
 *    trademark of Intalio, Inc.
 *
 * 5. Due credit should be given to the Exolab Project
 *    (http://www.exolab.org/).
 *
 * THIS SOFTWARE IS PROVIDED BY INTALIO, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * INTALIO, INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Copyright 1999 (C) Intalio, Inc. All Rights Reserved.
 *
 * $Id$
 */
package org.exolab.castor.tests.framework;

import java.util.Random;
import java.util.Vector;
import java.util.ArrayList;

/**
 * An helper class to assist in the generation of random instance of a given
 * object model.
 *
 * @author <a href="mailto:gignoux@intalio.com">Sebastien Gignoux</a>
 * @version $Revision$ $Date$
 */
public class RandomHelper {

    /**
     * The seed which was used to initialize the pseudo-random number generator
     */
    private static long _seed;

    /**
     * The pseudo random number generator.
     */
    private static Random _rand; 

    static {
        _seed = System.currentTimeMillis();
        _rand = new Random(_seed);
    }

    /**
     * The maximum length of a string generated by rndString()
     */
    private final static int MAX_STRING_LENGTH = 50;

    /**
     * The maximum length of a collection (like a Vector) generated by rndString()
     */
    private final static int MAX_COLLECTION_LENGTH = 50;

    /** 
     * List of the charactere that can be used to compose a string
     */
    private final static String PRINTABLE_CHAR = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_:.,=+~!@#$%^&*()[]{}\\|?";


    /**
     * Create a vector of random length and populate it. If the class to put
     * into the vector implement CastorTestable, randomizeFields() will be
     * called on the objects.
     *
     * @param vect the vector to populate
     * @param c the type of object to put in the vector
     */
    public static Vector getRandom(Vector vect, Class c) 
        throws InstantiationException, IllegalAccessException {

        int size = _rand.nextInt(MAX_COLLECTION_LENGTH);

        if (vect == null)
            vect = new Vector();

        for (int i=0; i<size; ++i) {
            Object obj = c.newInstance();
            vect.add(obj);
            if (CastorTestable.class.isAssignableFrom(c))
                ((CastorTestable)obj).randomizeFields();
        }

        return vect;
    }

    /**
     * Create an ArrayList of random length and populate it. If the class of the
     * object contained into the vector implement CastorTestable,
     * randomizeFields() will be called on the objects.
     *
     * @param al the ArrayList to populate
     * @param c the type of object to put in the vector
     */
    public static ArrayList getRandom(ArrayList al, Class c)
        throws InstantiationException, IllegalAccessException {
        return new ArrayList(getRandom(new Vector(al), c));
    }


    /**
     * Return a random string.
     */
    public static String getRandom(String s, Class c) {

        int size = 1 + _rand.nextInt(MAX_STRING_LENGTH - 1);

        char[] data = new char[size];

        for (int i=0; i<size; ++i)
            data[i] = rndPrintableChar();

        return new String(data);
    }
    
    /**
     * Return a random int.
     */
    public static int getRandom(int i, Class c) {
        return _rand.nextInt();
    }

    /**
     * Return a random float.
     */
    public static float getRandom(float f, Class c) {
        return _rand.nextFloat();
    }


    /**
     * Return a random boolean.
     */
    public static boolean getRandom(boolean b, Class c) {
        return _rand.nextBoolean();
    }

    /**
     * Return a random long.
     */
    public static long getRandom(long l, Class c) {
        return _rand.nextLong();
    }

    /**
     * Return a random double.
     */
    public static double getRandom(double d, Class c) {
        return _rand.nextDouble();
    }

    /**
     * Return a random printable character from the PRINTABLE_CHAR string
     */
    public static char rndPrintableChar() {
        return PRINTABLE_CHAR.charAt(_rand.nextInt(PRINTABLE_CHAR.length()));
    }

    /**
     * Return the seed which was used to initialize the pseudo-random number
     * generator
     */
    public static long getSeed() {
        return _seed;
    }

    /**
     * Reinitialize the random number generator with the given seed
     */
    public static void setSeed(long seed) {
        _seed = seed;
        _rand = new Random(_seed);
    }
}
