<?xml version="1.0" encoding="ISO-8859-1"?>
<document url="http://castor.exolab.org/xml-framework.xml">
  <body>
    <title>Using Castor XML</title>

    <header>
      <p>Reference: <api package="org.exolab.castor.xml">The XML Framework API</api></p>
    </header>

    <section title="Introduction">
      <p>
         Castor XML can marshal almost any "bean-like" Java Object to and from XML.
         The marshalling framework uses a set of ClassDescriptors and FieldDescriptors
         to describe how an Object should be marshalled and unmarshalled from XML.
      </p>
      <p>
         For those not familiar with the terms "marshal" and "unmarshal", it's simply
         the act of converting a stream (sequence of bytes) of data to and from
         an Object. The act of "marshalling" consists of converting an Object to
         to a stream, and "unmarshalling" from a stream to an Object.
      </p>
    </section>

    <section title="The Marshalling Framework">
      <p>
         The marshalling Framwork consists of two main classes,
         <api>org.exolab.castor.xml.Marshaller</api> and
         <api>org.exolab.castor.xml.Unmarshaller</api>.
      </p>
     <p>
         Lets walk through a very simple example. Assume we have a simple person
        class as follows:
<code>
public class Person implements java.io.Serializable {

   <comment>//The name of the person</comment>
   private String name = null;

   public Person() {
      super();
   }

   public Person(String name)

}
</code>

         To marshal an instance of the person class you simply call the Marshaller
         as follows:

         <code>

<comment>// Create a new Person</comment>
Person person = new Person("John Smith");

<comment>// Create a File to marshal to</comment>
writer = new FileWriter("test.xml");

<comment>// Marshal the person object</comment>
Marshaller.marshal(person, writer);

         </code>
      </p>


    </section>

    <section title="Using Existing Classes/Objects">
      <p>
        Castor can marshal almost any arbitrary Object to and from XML. When descriptors
        are not available for a specfic Class, the marshalling framework uses reflection
        to gain information about the object.
        <note>
           Actually an in memory set of descriptors are created for the object
           and we will soon have a way for saving these descriptors as Java source,
           so that they may be modified and compiled with little effort.
        </note>
      </p>
      <p>
         As long as the Object has getter and setter methods,
         the only restriction is that it implements "java.io.Serializable". The
         reason we force this restriction is that we needed a way to prevent
         marshalling of certain objects.
         <note>We are contemplating changing this restriction, as long as we provide a way to
         prevent objects from being marshalled.
         </note>
     </p>
    </section>

  </body>
</document>
