<?xml version="1.0"?>

<document url="http://castor.exolab.org/sourcegen.xml">

  <properties>
    <title>The Source Code Generator</title>
    <author email="kvisco@intalio.com">Keith Visco</author>
    <abstract>
       Describes how to use the Source Code Generator, and what
       is currently supported.
    </abstract>
    <status>Preliminary Draft</status>
  </properties>



  <body>

    <title>Using the Source Code Generator</title>
    <header>
      <p>Reference: <api package="org.exolab.castor.builder">The Source Builder API</api></p>
    </header>

    <section title="Introduction">

      <p>Castor's source code generator creates a set of Java classes
         which represent an object model for an XML Schema
         (W3C XML Schema, 20000407 Working Draft)<sup>1</sup>, as well as the
         necessary Class Descriptors used by the
         <a href="xml-framework.xml">marshalling framework</a>
         to obtain information about the generated classes.
         <note>
            Currently the generated source files will need to be compiled. We
            will be adding an Ant taskdef eventually to handle this automatically.
         </note>
     </p>

      <p>Example:
        <pre>java org.exolab.castor.builder.SourceGenerator -i foo-schema.xsd -package com.xyz</pre></p>

      <p>This will generate a set of source files from the the XML Schema, foo-schema.xsd,

         and place them in the com/xyz/* package.</p>



      <p>To compile the generated classes simply run javac, or your favorite compiler:

         <pre>javac com/xyz/*.java</pre></p>

      <p>Created class will have marshal and unmarshal methods which are used to go back

         and forth between XML and an Object instance.</p>

    </section>

    <section title="Source Generator Options">
       <p>
          The source code generator has a number of different options which
          may be set. Some of these are done using the command line, and others
          are done using a properties file.
       </p>
       <section title="Command Line Options">
          <table border="1" cellspacing="0">
             <tr>
               <th align="center">Option</th><th>Args</th><th>Description</th><th>Optional?</th>
             </tr>
             <tr>
               <td align="center">i</td><td><i>filename</i></td>
               <td>The input XML Schema file</td>
               <td>Required</td>
             </tr>
             <tr>
               <td align="center">package</td><td><i>package-name</i></td>
               <td>The package for the generated source</td>
               <td>Optional</td>
             </tr>
             <tr>
               <td align="center">dest</td><td><i>path</i></td>
               <td>The destination in which to put the generated source</td>
               <td>Optional</td>
             </tr>
             <tr>
               <td align="center">line-separator</td><td><i>unix | mac | win</i></td>
               <td>
                  Sets the line separator style for the desired platform. This is
                  useful if you are generating source on one platform, but will
                  be compiling/modifying on another platform.
               </td>
               <td>Optional</td>
             </tr>
             <tr>
               <td align="center">types</td><td><i>type-factory</i></td>
               <td>Sets which type factory to use. This is useful if you
                   you want JDK 1.2 collections instead of JDK 1.1
                   (see <a href="#Collection Types">Collection types</a>)
               </td>
               <td>Optional</td>
             </tr>
             <tr>
               <td align="center">h</td><td></td>
               <td>Shows the help/usage screen</td>
               <td>Optional</td>
             </tr>
             <tr>
               <td align="center">f</td><td></td>
               <td>
                  Forces the source generator to supress all non-fatal errors, such
                  as overwriting of pre-existing files.
               </td>
               <td>Optional</td>
             </tr>
          </table>
       </section>

       <!-- Builder.propteries -->
       <section title="Advanced Options">
         <section title="Bound Properties">
            <p>Since version: 0.8.9</p>
            <p>
               Bound properties are "properties" of a class, which when updated the
               class will send out a java.beans.PropertyChangeEvent to all
               registered java.beans.PropertyChangeListeners.
            </p>
            <p>To enable bound properties uncomment the appropriate line in the
               "org/exolab/castor/builder/castorbuilder.properties" file:
               <code>
                  # To enable bound properties uncomment the following line. Please
                  # note that currently *all* fields will be treated as bound properties
                  # when enabled. This will change in the future when we introduce
                  # fine grained control over each class and it's properties.
                  #
                  #org.exolab.castor.builder.boundproperties=true
               </code>
               <p>
                  When enabled, <b>all</b> properties will be treated as bound properties.
                  For each class that is generated a <b>setPropertyChangeListener</b>
                  method is created as follows:
                 <code>
                    /**
                     * Registers a PropertyChangeListener with this class.
                     * @param pcl The PropertyChangeListener to register.
                    **/
                    public void addPropertyChangeListener(java.beans.PropertyChangeListener pcl)
                    {
                        propertyChangeListeners.addElement(pcl);
                    } //-- void addPropertyChangeListener(java.beans.PropertyChangeListener)
                 </code>
                 Whenever a property of the class is changed, a <b>PropertyChangeEvent</b>
                 will be sent to all registered listeners. The property name, the old
                 value, and the new value will be set in the <b>PropertyChangeEvent</b>.

                 <b>Note: To prevent unnecessary overhead, if the property is a collection,
                    the old value will be null.
                 </b>

               </p>
            </p>
         </section>
         <section title="Class Creation/Mapping">
            <p>Since version: 0.8.9</p>
            <p>
               The source generator can treat the XML Schema structures such
               as complexType and element in two main ways. The first, and
               currently default method is called the "element" method. The
               other is called the "type" method.
            </p>
            <section title="The 'element' method">
               <p>
                  The "element" method creates classes for all elements whose
                  type is a complexType. Abstract classes are created for all
                  top-level complexTypes. Any elements whose type is a top-level
                  type will have a new class create that extends the abstract class
                  which was generated for that top-level complexType.
               </p>
               <p>
                  Classes are not created for elements whose type is a simpleType.
               </p>
            </section>
            <section title="The 'type' method">
               <p>
                  The "type" method creates classes for all top-level complexTypes, or
                  elements that contain an "anonymous" (in-lined) complexType.
               </p>
               <p>
                  Classes will not be generated for elements whose type is a top-level
                  type.
               </p>
            </section>
            <p>
               More information on this is forth coming.
            </p>
            <p>
              To change the "method" of class creation simple edit the
                <b>castorbuilder.properties</b> file:
              <code>
                 # Java class mapping of &lt;xsd:element&gt;'s and &lt;xsd:complexType&gt;'s
                 #
                 #org.exolab.castor.builder.javaclassmapping=element
             </code>
            </p>
         </section>
       </section>
    </section>

    <section title="Supported XML Schema Built-In Datatypes" ref-id="types">

      <p>
         The following is a list of supported XML Schema types and their
         supported facets.
     </p>

      <p>Base (primitive) datatypes
         <ul>
            <li>binary</li>
            <li>boolean</li>
            <li>integer
               <p>
                  <ul>facets:
                     <li>minExclusive</li>
                     <li>maxExclusive</li>
                     <li>minInclusive</li>
                     <li>maxInclusive</li>
                     <li>pattern</li>
                  </ul>
               </p>
            </li>
            <li>double</li>
            <li>long</li>
            <li>short</li>
            <li>string
               <p>
                  <ul>facets:
                     <li>enumeration</li>
                     <li>pattern</li>
                  </ul>
               </p>
            </li>
            <li>timeInstant</li>
         </ul>
      </p>

      <p>Generated datatypes
         <ul>
            <li>ID</li>
            <li>IDREF</li>
            <li>NCName</li>
            <li>NMToken</li>
            <li>positiveInteger</li>
            <li>negativeInteger</li>

         </ul>
      </p>

      <p>Collection types <a name="Collection Types"/>
        <ul>
          <li>Java 1.1 (default): java.util.Vector</li>
          <li>Java 1.2: use the option <tt>types -j2</tt>, collection type is java.util.Collection</li>
          <li>ODMG 3.0: use the option <tt>types -odmg</tt>, collection tyoe is odmg.DArray</li>
        </ul>
      </p>

  </section>

  <section title="Supported XML Schema Structures">

    <p>The supported structures for XML Schema is currently limited to:</p>

    <p>Structural elements:

    <ul>
      <li>annotation
         <ul>
            <li>appinfo</li>
            <li>info</li>
         </ul>
      </li>
      <li>simpleType
          - not complete (see <a href="#types">Supported Datatypes</a>)
      </li>
      <li>complexType</li>
      <li>element</li>
      <li>attribute</li>
    </ul>
   </p>

    <p>
       Supported facets (see <a href="#types">Supported Datatypes</a>)
    </p>



    <body-note><sup>1</sup>Castor 0.8.8 uses XML Schema draft 19991217</body-note>
    <body-note>Grouping support will be added soon</body-note>

    </section>
  </body>

</document>

